# HG changeset patch
# User pm
# Date 1527148864 -7200
#      Thu May 24 10:01:04 2018 +0200
# Node ID dd7423998369a28e1d879efdb514f7b4750b70d4
# Parent  328729ed256a3d8ef8a51f884c03a86a1f2a432d
Ticket mantis 0004555: Erreur 'can't convert undefined to object' lors de l'ajout depuis les entetes

diff --git a/comm-esr60/comm/mail/base/content/msgHdrViewOverlay.js b/comm-esr60/comm/mail/base/content/msgHdrViewOverlay.js
--- a/comm-esr60/comm/mail/base/content/msgHdrViewOverlay.js
+++ b/comm-esr60/comm/mail/base/content/msgHdrViewOverlay.js
@@ -1289,50 +1289,52 @@
       document.getElementById("editContactItem").label);
   }
 
-  let chatAddresses = [aEmailAddress];
-  let card = cardDetails.card;
-  if (card) {
-    let gTalk = card.getProperty("_GoogleTalk", null);
-    if (gTalk)
-      chatAddresses.push(gTalk);
-    let jid = card.getProperty("_JabberId", null);
-    if (jid)
-      chatAddresses.push(jid);
-  }
-  let chatContact;
-  if (!("chatHandler" in window)) {
-    window.chatHandler = {};
-    ChromeUtils.import("resource:///modules/chatHandler.jsm", chatHandler);
-  }
-  let onlineContacts = chatHandler.onlineContacts;
-  for (let chatAddress of chatAddresses) {
-    if (Object.prototype.hasOwnProperty.call(onlineContacts, chatAddresses)) {
-      chatContact = onlineContacts[chatAddress];
-      break;
+  if (Services.prefs.getBoolPref("mail.chat.enabled")){  
+    let chatAddresses = [aEmailAddress];
+    let card = cardDetails.card;
+    if (card) {
+      let gTalk = card.getProperty("_GoogleTalk", null);
+      if (gTalk)
+        chatAddresses.push(gTalk);
+      let jid = card.getProperty("_JabberId", null);
+      if (jid)
+        chatAddresses.push(jid);
     }
-  }
-  if (aDocumentNode.chatContact) {
-    aDocumentNode.chatContact.removeObserver(aDocumentNode.chatContactObserver);
-    delete aDocumentNode.chatContact;
-    delete aDocumentNode.chatContactObserver;
-  }
-  if (chatContact) {
-    aDocumentNode.chatContact = chatContact;
-    aDocumentNode.chatContactObserver = function(aSubject, aTopic, aData) {
-      if (aTopic == "contact-removed") {
-        this.chatContact.removeObserver(this.chatContactObserver);
-        delete this.chatContact;
-        delete this.chatContactObserver;
-        this.removeAttribute("chatStatus");
-        this.removeAttribute("presenceTooltip");
+    let chatContact;
+    if (!("chatHandler" in window)) {
+      window.chatHandler = {};
+      Components.utils.import("resource:///modules/chatHandler.jsm", chatHandler);
+    }
+    let onlineContacts = chatHandler.onlineContacts;
+    for (let chatAddress of chatAddresses) {
+      if (Object.prototype.hasOwnProperty.call(onlineContacts, chatAddresses)) {
+        chatContact = onlineContacts[chatAddress];
+        break;
       }
-      else if (aTopic == "contact-status-changed") {
-        UpdateEmailPresenceDetails(this, this.chatContact);
-      }
-    }.bind(aDocumentNode);
-    chatContact.addObserver(aDocumentNode.chatContactObserver);
-  }
-  UpdateEmailPresenceDetails(aDocumentNode, chatContact);
+    }
+    if (aDocumentNode.chatContact) {
+      aDocumentNode.chatContact.removeObserver(aDocumentNode.chatContactObserver);
+      delete aDocumentNode.chatContact;
+      delete aDocumentNode.chatContactObserver;
+    }
+    if (chatContact) {
+      aDocumentNode.chatContact = chatContact;
+      aDocumentNode.chatContactObserver = function(aSubject, aTopic, aData) {
+        if (aTopic == "contact-removed") {
+          this.chatContact.removeObserver(this.chatContactObserver);
+          delete this.chatContact;
+          delete this.chatContactObserver;
+          this.removeAttribute("chatStatus");
+          this.removeAttribute("presenceTooltip");
+        }
+        else if (aTopic == "contact-status-changed") {
+          UpdateEmailPresenceDetails(this, this.chatContact);
+        }
+      }.bind(aDocumentNode);
+      chatContact.addObserver(aDocumentNode.chatContactObserver);
+    }
+    UpdateEmailPresenceDetails(aDocumentNode, chatContact);
+   }
 
   // When we are adding cards, we don't want to move the display around if the
   // user has clicked on the star, therefore if it is locked, just exit and
